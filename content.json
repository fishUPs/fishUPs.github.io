{"meta":{"title":"Alma的个人博客","subtitle":"","description":"","author":"Q","url":"https://fishUPs.gitHub.io","root":"/"},"pages":[{"title":"about","date":"2021-03-15T11:20:33.000Z","updated":"2021-12-18T14:07:44.758Z","comments":false,"path":"about/index.html","permalink":"https://fishups.github.io/about/index.html","excerpt":"","text":"欢迎光临，有事邮件联系。"},{"title":"所有分类","date":"2021-12-18T14:07:44.758Z","updated":"2021-12-18T14:07:44.758Z","comments":false,"path":"categories/index.html","permalink":"https://fishups.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"vscode和devc++配置c/c++编译环境","slug":"vscode和devc-配置c-c-编译环境","date":"2021-09-29T11:12:34.000Z","updated":"2021-09-29T11:12:34.000Z","comments":true,"path":"posts/5d45159c.html","link":"","permalink":"https://fishups.github.io/posts/5d45159c.html","excerpt":"配置vscode C语言环境","text":"vscode安装环境1.minGw——(MinGW 是一组包含文件和端口库，其功能是允许控制台模式的程序使用微软的标准C运行时（C Runtime）库) 安装时记住安装位置，最好直接复制安装地址备用。在windows path环境变量添加mingw子文件bin地址xxx\\xxx\\mingw64\\bin 2.vscode插件 C/C++插件 Code Runner 插件 设置配置1.新建文件夹vscode（随便什么名字），在这文件下新建一个文件夹vscode-c，表明C语言程序都在这个文件夹内，在这个文件夹新建一个c语言文件，随便写点测试的代码（我的是test.c） 2.文件-首选项-设置-用户-扩展,打开这个选项 3.打开刚写的文件夹，目录如图 在.vscode文件下新建三个文件launch.json setting.json tasks.json launch.json内容 1234567891011121314151617181920212223242526&#123; &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: \\[ &#123; &quot;name&quot;: &quot;(gdb) Launch&quot;, // 配置名称，将会在启动配置的下拉菜单中显示 &quot;type&quot;: &quot;cppdbg&quot;, // 配置类型，这里只能为cppdbg &quot;request&quot;: &quot;launch&quot;, // 请求配置类型，可以为launch（启动）或attach（附加） &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,// 将要进行调试的程序的路径 &quot;args&quot;: [], // 程序调试时传递给程序的命令行参数，一般设为空即可 &quot;stopAtEntry&quot;: false, // 设为true时程序将暂停在程序入口处，一般设置为false &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, // 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录 &quot;environment&quot;: \\[], &quot;externalConsole&quot;: true, // 调试时是否显示控制台窗口，一般设置为true显示控制台 &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;C:\\\\Program Files (x86)\\\\mingw-w64\\\\i686-8.1.0-posix-dwarf-rt_v6-rev0\\\\mingw32\\\\bin\\\\gdb.exe&quot;, // miDebugger的路径，注意这里要与MinGw的路径对应 &quot;preLaunchTask&quot;: &quot;gcc&quot;, // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc &quot;setupCommands&quot;: \\[ &#123; &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true &#125; ] &#125; ] &#125; tasks.json内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&#123; // 有关 tasks.json 格式的参考文档：https://go.microsoft.com/fwlink/?LinkId=733558 。 &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: \\[&#123; &quot;label&quot;: &quot;gcc&quot;, &quot;type&quot;: &quot;shell&quot;, // &#123; shell | process &#125; // 适用于 Windows 的配置： &quot;windows&quot;: &#123; &quot;command&quot;: &quot;gcc&quot;, &quot;args&quot;: [ &quot;-g&quot;, &quot;\\&quot;$&#123;file&#125;\\&quot;&quot;, &quot;-o&quot;, &quot;\\&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe\\&quot;&quot; // 设置编译后的可执行文件的字符集为 GB2312： // &quot;-fexec-charset&quot;, &quot;GB2312&quot; // 直接设置命令行字符集为 utf-8： // chcp 65001 ] &#125;, // 定义此任务属于的执行组： &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, // &#123; build | test &#125; &quot;isDefault&quot;: true // &#123; true | false &#125; &#125;, // 定义如何在用户界面中处理任务输出： &quot;presentation&quot;: &#123; // 控制是否显示运行此任务的面板。默认值为 &quot;always&quot;： // - always: 总是在此任务执行时显示终端。 // - never: 不要在此任务执行时显示终端。 // - silent: 仅在任务没有关联问题匹配程序且在执行时发生错误时显示终端 &quot;reveal&quot;: &quot;silent&quot;, // 控制面板是否获取焦点。默认值为 &quot;false&quot;： &quot;focus&quot;: false, // 控制是否将执行的命令显示到面板中。默认值为“true”： &quot;echo&quot;: false, // 控制是否在任务间共享面板。同一个任务使用相同面板还是每次运行时新创建一个面板： // - shared: 终端被共享，其他任务运行的输出被添加到同一个终端。 // - dedicated: 执行同一个任务，则使用同一个终端，执行不同任务，则使用不同终端。 // - new: 任务的每次执行都使用一个新的终端。 &quot;panel&quot;: &quot;dedicated&quot; &#125;, // 使用问题匹配器处理任务输出： &quot;problemMatcher&quot;: &#123; // 代码内问题的所有者为 cpp 语言服务。 &quot;owner&quot;: &quot;cpp&quot;, // 定义应如何解释问题面板中报告的文件名 &quot;fileLocation&quot;: \\[ &quot;relative&quot;, &quot;$&#123;workspaceFolder&#125;&quot; ], // 在输出中匹配问题的实际模式。 &quot;pattern&quot;: &#123; // The regular expression. &quot;regexp&quot;: &quot;^(.\\*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.\\*)$&quot;, // 第一个匹配组匹配文件的相对文件名： &quot;file&quot;: 1, // 第二个匹配组匹配问题出现的行： &quot;line&quot;: 2, // 第三个匹配组匹配问题出现的列： &quot;column&quot;: 3, // 第四个匹配组匹配问题的严重性，如果忽略，所有问题都被捕获为错误： &quot;severity&quot;: 4, // 第五个匹配组匹配消息： &quot;message&quot;: 5 &#125; &#125; &#125;]&#125; setting.json 123456&#123; &quot;files.associations&quot;: &#123; &quot;tidl_alg_int.h&quot;: &quot;c&quot;, &quot;limits&quot;: &quot;c&quot; &#125;&#125; devc++安装没啥好说的 设置1.工具-编译器选项-代码生成优化-连接器，打开产生调试信息选项 2.工具-环境选项-打开查看鼠标指向标量","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://fishups.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[]},{"title":"用GitHub action实现netlify和GitHub page同步","slug":"用github-action实现netlify和github-page同步","date":"2021-09-28T10:13:42.000Z","updated":"2021-09-28T10:13:42.000Z","comments":true,"path":"posts/305c9361.html","link":"","permalink":"https://fishups.github.io/posts/305c9361.html","excerpt":"netlify国内访问速度太慢，利用action的自动部署功能，实现netlify在线更改，推送到GitHubpage以加快国内访问速度","text":"netlify国内访问速度太慢，利用action的自动部署功能，实现netlify在线更改，推送到GitHubpage以加快国内访问速度 准备工作GitHub 仓库本博客使用方案是博客真原文件和hexo生成文件分在2个仓库储存。 首先，我们需要准备一个部署博客的仓库，一般命名为 .github.io 这种形式，用于存放hexo生成的静态网站。 另一个仓库，随便什么名字，用于存放博客源文件，在本地使用GitHub desktop更加方便的更新本地和这个仓库。 提醒，这里也可以建两个分支，一样的。 创建 GitHub Personal Access Token这里还需要创建 Personal Access Token 用于 GitHub Actions 所构建得虚拟系统可以内容推送到仓库。简单说就是密匙 Personal Access Token 的生成教程见创建个人访问令牌 - GitHub Docs 注意点开repo权限，不然无法访问仓库 设置仓库 Secrets将创建好的 Personal Access Token 添加到仓库的 Secrets 中，并设置名称， 如图： 在源码仓库和存放生成文件的仓库都放一个。 创建 workflow 脚本在博客根目录下创建 .github/workflows 文件夹，并在文件夹下创建 YAML 文件用于编写任务执行脚本。（我这里创建的是 hexoci.yml，命名可以随意） 脚本内容如下： 点击展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566name: Blog CI/CD# 触发条件：在 push 到 hexo-blog-backup 分支后触发on: push: branches: - main #博客源码存放的分支，2020年10月后都默认mainenv: TZ: Asia/Shanghaijobs: blog-cicd: name: Hexo blog build &amp; deploy runs-on: ubuntu-latest # 使用最新的 Ubuntu 系统作为编译部署的环境 steps: - name: Checkout codes uses: actions/checkout@v2 - name: Setup node # 设置 node.js 环境 uses: actions/setup-node@v1 with: node-version: &#x27;12.x&#x27; - name: Cache node modules # 设置包缓存目录，避免每次下载 uses: actions/cache@v1 with: path: ~/.npm key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125; - name: Install hexo dependencies # 下载 hexo-cli 脚手架及相关安装包 run: | npm install hexo-cli gulp -g npm install - name: Generate files # 编译 markdown 文件 run: | hexo clean hexo generate # - name: Execute gulp task # gulp是自动化流程工具，但是我安装失败，没有这个也能使用 # run: gulp - name: Deploy hexo blog env: # Github 仓库 GITHUB_REPO: github.com/fishUPs/fishUPs.github.io # Coding 仓库 #CODING_REPO: e.coding.net/xxxxxxxx/blogs.git # Gitee 仓库 #GITEE_REPO: gitee.com/xxxxxxxx/xxxxxxxx.gitee.io # 将编译后的博客文件推送到指定仓库 run: | cd ./public &amp;&amp; git init &amp;&amp; git add . git config user.name &quot;用户名&quot; git config user.email &quot;你的注册邮箱地址&quot; git add . git commit -m &quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot; git push --force --quiet &quot;https://$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;@$GITHUB_REPO&quot; master:master # git push --force --quiet &quot;https://coding用户名:$&#123;&#123; secrets.CODING_TOKEN &#125;&#125;@$CODING_REPO&quot; master:master # git push --force --quiet &quot;https://gitee用户名:$&#123;&#123; secrets.GITEE_ACCESS_TOKEN &#125;&#125;@$GITEE_REPO&quot; master:master 部署最后，我们只需要将源码推送到指定分支，GitHub Actions 就会自动帮我们部署项目啦。GitHubpage也会自动更新。 netlify在线生成文章也会反推送给GitHub源码仓库，触发action推送到page。 最后再说一下怎么找 action，以下是几个常用的网址： GitHub 官方的 action：https://github.com/actions GitHub 官方市场中的 action：https://github.com/marketplace?type=actions 第三方收集的有用的 action：https://github.com/sdras/awesome-actions 需要了解 workflow 的基本语法可以查看官方帮助 (opens new window)，也可以参考阮一峰老师的 GitHub Actions 入门教程 。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fishups.github.io/categories/hexo/"}],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://fishups.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"从零开始将hexo博客完全线上化","slug":"从零开始将hexo博客完全线上化","date":"2021-09-23T12:56:00.000Z","updated":"2021-09-23T12:56:00.000Z","comments":true,"path":"posts/d084dfa4.html","link":"","permalink":"https://fishups.github.io/posts/d084dfa4.html","excerpt":"hexo过度依赖本地，导致更新复杂且源码安全性不够易丢失，先将hexo源文件全部搬到线上，并配合Netlify cms实现线上增删改查","text":"hexo过度依赖本地，导致更新复杂且源码安全性不够易丢失，先将hexo源文件全部搬到线上，并配合Netlify cms实现线上增删改查 用GitHub desktop实现源码推送到GitHub库GitHub desktop优点GitHub for Windows（GitHub desktop） 是一个 Metro 风格应用程序，集成了自包含版本的 Git，bash 命令行 shell，PowerShell 的 posh-git 扩展。GitHub 为 Windows 用户提供了一个基本的图形前端去处理大部分常用版本控制任务，可以创建版本库，向本地版本库递交补丁，在本地和远程版本库之间同步。 简单说就是更加便捷的处理本地和git仓库的传输操作，不需要敲代码。 Github for windows下载及安装1.Github官网，打开我们的仓库，可以看到安装GitHub for Windows的按钮： 2.点击“Set up in Desktop”，进入如下界面： 3.点击蓝色按钮进行下载，我们可以看到一个名为“GithubSetup.exe”的安装文件，安装即可。 Github for Windows使用方法：1、打开Github，输入账号密码进行登录。 2、登录之后，点击file，新建仓库。填写相应信息，创建仓库： 在电脑上找到我们本地路径，目录结构如图所示： 在这里的任何变动desktop都会检测到并显示变更内容。 3、做完变更后，此时，打开客户端可以看到”Test”仓库对应的change选项有一个新消息： 在客户端的下方填写相关描述，点击”Commit to master”进行提交。概述最好言简意赅，稍微中等的项目都会产生无数次的更新，要是更新概述写的不清楚，回档很难找到合适的历史版本。 4、点击”Commit to master”只是让Github客户端记录这次进行的改动，相当于一次游戏存档，在将来的某一天如果想重玩这个存档，可以点击上面的圆圈“读取存档”，让项目恢复到这次记录的状态。存档内容都在history 5、如果想将本地的改动提交到网站上，可以点击右上角的”push”。就可以去GitHub主页查看更新了。 6、对于hexo博客，创建完仓库直接把hexo整个文件夹内容拖过去就行，上传的时候会自动删减去不需要的子文件夹，无需担心。 将GitHub上的源码部署到Netlify1、Netlify优点：操作界面更加图形化，访问速度比GitHub快，而且操作界面不会和GitHub一样不定时登不上。Netlify还提供免费https证书。 发布网站首先，你需要注册一个Netlify账号，Netlify提供邮箱注册和包括GitHub在内的第三方验证登陆。注册过程和一般网站注册过程大同小异，你会收到一封来自Netlify的邮件，确认你的注册信息，点击邮件中的链接登陆你的账户。 关联GITHUB账户登陆后，在 https://app.netlify.com/account/sites 页面下，点击 New site from Git 进入下一步。 点击 GitHub 关联 Netlify 和你的仓库 选择仓库授权完毕后，页面会跳转回 Netlify 。通过搜索栏来快速找到你所创建的 hexo 仓库，选中该仓库。 配置发布设置Netlify 允许你自定义你的部署设置，我们的demo只需使用默认设置即可，目录选择 /public，分支选源码所在分支main 构建并发布网站此时此刻，万事具备，只欠东风。 点击完 Deploy site 之后，Netlify 会构建并发布你的网站内容。你可以放心得伸个懒腰，泡杯咖啡，剩下的就交给 Netlify 处理。你可以通过 Deploy log 实时观察部署过程。 更改域名网站上线。Netlify会在网站发布成功的同时提供给你一个 *.netlify.com 为后缀以及随机生成的英文名为前缀的子域名。 假如你不喜欢 Netlify 给你的前缀，并且还未来得及购买域名，可以通过 Domain settings &gt; Edit site name 来快速美化你的网址，当然也可以绑定自己的域名，就像本站。和GitHub一样，Netlify没有中文版！不过好整个建站过程总体很顺畅，没有遇到任何障碍。 使用Netlify cms实现线上增删改查Netlify cms优点首先，我们来了解一下配置完之后可以做到哪些事情？ 在线新建，编辑，预览，删除博客文章 支持文章草稿，工作流 支持对博客图片的管理 支持在线修改博客配置，例如对首页顶部图的修改，友链的修改 图片预览：配置完的界面 在线对文章进行编辑，修改 工作流 对媒体资源的管理 对其他页面的修改 在线修改博客首页、文章页、归档页等页面的顶部图 在线添加、编辑友链页面 简单说明此方法不仅仅只适用于fluid 主题，其他各类主题也可以通过此方法达到在线修改配置的目的，只要你配置完成，几乎可以修改所有配置项。包括但不限于以下类型的文件yml、yaml、toml、json、md、markdown、html具体请查看 👉Netlify cms文档。 具体步骤准备工作在部署完成后，你需要开启Identity（此项默认是关闭的需要手动开启） 进入设置中 将Registration preferences修改为Invite only此项为是否开启注册，默认是开启注册。修改为Invite only后表示仅受邀请的用户可以注册，当然此项你可以在自己注册完毕之后再行修改。 image-20210418225239607 下滑找到Git Gateway并开启。 修改博客配置在博客source文件夹中，创建admin文件夹，并新建两个文件index.html和config.yml image-20210418230338242 在index.html中添加以下内容 1234567891011121314151617&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta http-equiv=&quot;x-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt; &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;white&quot; /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;&gt;&lt;/script&gt; &lt;title&gt;Amlaの领地&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script defer=&quot;true&quot; src=&quot;https://cdn.jsdelivr.net/npm/netlify-cms@2/dist/netlify-cms.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;body background=&quot;https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/mmexport1602581319886.webp&quot; style=&quot;background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&quot;&gt;&lt;/body&gt;&lt;/html&gt; 在config.yml 中添加以下折叠内容 点击展开backend: name: git-gateway # https://github.com/netlify/netlify-cms branch: main # 要更新的分支(可选；默认为主分支)# This line should *not* be indentedpublish_mode: editorial_workflow# This line should *not* be indentedmedia_folder: &quot;source/images/uploads&quot; # 媒体文件将存储在图片/上载下的Repo中。public_folder: &quot;/images/uploads&quot; # 上传的媒体的src属性将以/images/uploads开头。site_url: https://alma-blog.netlify.app/ # 网站网址display_url: https://alma-blog.netlify.app/ # 显示网址locale: &quot;zh_Hans&quot; # 语言环境 https://github.com/netlify/netlify-cms/tree/master/packages/netlify-cms-locales/srccollections: # https://www.netlifycms.org/docs/configuration-options/#collections - name: &quot;posts&quot; # 在路由中使用，例如：/admin/collections/blog。 label: &quot;Post&quot; # 在用户界面中使用 folder: &quot;source/_posts&quot; # 存储文件的文件夹的路径。 create: true # 允许用户在这个集合中创建新的文件。 fields: # 每份文件的字段，通常是前面的内容。 - &#123; label: &quot;顶部图&quot;, name: &quot;banner_img&quot;, widget: &quot;image&quot;, required: false, &#125; - &#123; label: &quot;文章封面&quot;, name: &quot;index_img&quot;, widget: &quot;image&quot;, required: false, &#125; - &#123; label: &quot;文章排序&quot;, name: &quot;sticky&quot;, widget: &quot;number&quot;, required: false &#125; - &#123; label: &quot;标题&quot;, name: &quot;title&quot;, widget: &quot;string&quot; &#125; - &#123; label: &quot;发布日期&quot;, name: &quot;date&quot;, widget: &quot;datetime&quot;, format: &quot;YYYY-MM-DD HH:mm:ss&quot;, dateFormat: &quot;YYYY-MM-DD&quot;, timeFormat: &quot;HH:mm:ss&quot;, required: false, &#125; - &#123; label: &quot;更新日期&quot;, name: &quot;updated&quot;, widget: &quot;datetime&quot;, format: &quot;YYYY-MM-DD HH:mm:ss&quot;, dateFormat: &quot;YYYY-MM-DD&quot;, timeFormat: &quot;HH:mm:ss&quot;, required: false, &#125; - &#123; label: &quot;标签&quot;, name: &quot;tags&quot;, widget: &quot;list&quot;, required: false &#125; - &#123; label: &quot;分类&quot;, name: &quot;categories&quot;, widget: &quot;list&quot;, required: false &#125; - &#123; label: &quot;关键词&quot;, name: &quot;keywords&quot;, widget: &quot;list&quot;, required: false &#125; - &#123; label: &quot;摘要&quot;, name: &quot;excerpt&quot;, widget: &quot;list&quot;, required: false &#125; - &#123; label: &quot;内容&quot;, name: &quot;body&quot;, widget: &quot;markdown&quot;, required: false &#125; - &#123; label: &quot;永久链接&quot;, name: &quot;permalink&quot;, widget: &quot;string&quot;, required: false, &#125; - &#123; label: &quot;评论&quot;, name: &quot;comments&quot;, widget: &quot;boolean&quot;, default: true, required: false, &#125; - name: &quot;pages&quot; label: &quot;Pages&quot; files: - file: &quot;source/about/index.md&quot; name: &quot;about&quot; label: &quot;关于&quot; fields: - &#123; label: &quot;标题&quot;, name: &quot;title&quot;, widget: &quot;string&quot; &#125; - &#123; label: &quot;内容&quot;, name: &quot;body&quot;, widget: &quot;markdown&quot;, required: false &#125; - &#123; label: &quot;评论&quot;, name: &quot;comments&quot;, widget: &quot;boolean&quot;, default: true, required: false, &#125; # 如果你不是fluid主题，请删除以下配置，或者对文件路径及字段进行修改 - name: &quot;settings&quot; label: &quot;settings&quot; files: - file: &quot;source/_data/fluid_config.yml&quot; name: &quot;fluid&quot; label: &quot;fluid主题配置&quot; editor: preview: true # 是否开启编辑预览 fields: - label: &quot;首页&quot; name: &quot;index&quot; widget: &quot;object&quot; collapsed: true # 是否折叠显示 fields: - label: &quot;顶部图&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;文章页&quot; name: &quot;post&quot; widget: &quot;object&quot; collapsed: true fields: - label: &quot;顶部图(默认)&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;文章封面图(默认)&quot; name: &quot;default_index_img&quot; widget: &quot;image&quot; - label: &quot;归档页&quot; name: &quot;archive&quot; widget: &quot;object&quot; collapsed: true fields: - label: &quot;顶部图&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;分类页&quot; name: &quot;category&quot; widget: &quot;object&quot; collapsed: true fields: - label: &quot;顶部图&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;标签页&quot; name: &quot;tag&quot; widget: &quot;object&quot; collapsed: true fields: - label: &quot;顶部图&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;关于页&quot; name: &quot;about&quot; widget: &quot;object&quot; collapsed: true fields: - label: &quot;顶部图&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;友链页面&quot; name: &quot;links&quot; widget: &quot;object&quot; collapsed: true fields: - label: &quot;顶部图&quot; name: &quot;banner_img&quot; widget: &quot;image&quot; - label: &quot;高度&quot; name: &quot;banner_img_height&quot; widget: &quot;number&quot; - label: &quot;项目&quot; name: &quot;items&quot; widget: &quot;list&quot; fields: - &#123; label: &quot;网站名称&quot;, name: &quot;title&quot;, widget: &quot;string&quot;, required: false, &#125; - &#123; label: &quot;网址描述&quot;, name: &quot;intro&quot;, widget: &quot;string&quot;, required: false, &#125; - &#123; label: &quot;网站地址&quot;, name: &quot;link&quot;, widget: &quot;string&quot;, required: false, &#125; - &#123; label: &quot;网站图片&quot;, name: &quot;avatar&quot;, widget: &quot;image&quot;, required: false, &#125; 完成至此[Netlify cms](https://www.netlifycms.org/) 配置就算完成了，只要推送代码，等待片刻，通过你部署在[Netlify](https://www.netlify.com/) 上的域名，加`/admin/`即可访问你的博客后台。推荐将`xxxx/admin`添加到博客导航栏，方便访问。 遇到的问题1、要是部署完，登录admin时无法登录，将访问权限改成开放，登录一下，再改回仅邀请。 2、admin界面未适配手机端，建议pc或pad端使用。 3、cms在线虽然能markdown写文章，但是实时展示效果不好，推荐在线创建然后本地写好后直接复制markdown文本到cms，再推送。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fishups.github.io/categories/hexo/"}],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://fishups.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"一望可相见,一步如重城","slug":"山木诗","date":"2021-09-16T15:34:29.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/16d8a202.html","link":"","permalink":"https://fishups.github.io/posts/16d8a202.html","excerpt":"来自北大bbs的诗","text":"来自北大bbs的诗 《无题》 作者——Littlesen 夕岚分彩翠，高树藏莺声。 乍向风中看，花落更分明。 徘徊觉露冷，清宵月影横。 泠泠砭肌发，疑是晓寒生。 一望可相见，一步如重城。 所爱隔山海，山海不可平。","categories":[{"name":"心事","slug":"心事","permalink":"https://fishups.github.io/categories/%E5%BF%83%E4%BA%8B/"}],"tags":[{"name":"诗","slug":"诗","permalink":"https://fishups.github.io/tags/%E8%AF%97/"}]},{"title":"重装系统后重新配置博客","slug":"重装系统后重新配置博客","date":"2021-07-28T08:15:32.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/3accde65.html","link":"","permalink":"https://fishups.github.io/posts/3accde65.html","excerpt":"以下方法只适用于没有删除hexo blog文件夹,不足之处是博客数据任然依赖本地储存，本地一旦数据出现丢失，基本上就完蛋了。后续改进将博客源文件配合自动化备份上传到github博客库的分支下，hexo有自动化插件backup,切记设为不公开。","text":"以下方法只适用于没有删除hexo blog文件夹,不足之处是博客数据任然依赖本地储存，本地一旦数据出现丢失，基本上就完蛋了。后续改进将博客源文件配合自动化备份上传到github博客库的分支下，hexo有自动化插件backup,切记设为不公开。 因为重装系统后，Hexo 相关依赖插件/软件和在C盘的缓存资料都会被删除，以至于Hexo的相关命令都无法运行。所有，在重装系统后，都要重新部署Hexo。但是重新部署并不难，只需要几个步骤就行。 因为我的hexo blog文件夹不存储于C盘，并没有因为重装系统被删掉。所有重新部署很容易。 安装 git 和 node git for windows: [https://git-scm.com/Node.js: [https://nodejs.org/en/ 生成ssh密钥配置git个人信息和生成ssh密钥打开git bash，输入 123git config --global user.name &quot;xxxxx&quot;git config --global user.email &quot;xxxxxx@xx.com&quot;ssh-keygen -t rsa -C &quot;xxxxxx@xx.com&quot; 把上面的xxxx换成自己的资料，然后一直Enter就行 设置Github的ssh密钥当上面的运行完成后，会在 C:\\Users\\user\\.ssh里出现.ssh文件夹，里面有id_rsa和id_rsa.pub两个文件，复制id_rsa.pub的内容(用记事本或者任意文本编辑器打开都可）。 打开 Github 网页，依次是 右上角Settings - SSH and GPG keys - New SSH key 把复制的内容粘贴到 Key栏，然后保存。保存了新的密匙，原来的可以删除。 1ssh -T git@github.com 在gitbush测试是否成功 安装Hexogit bash 上 输入 npm install hexo-cli -g hexo -v测试是否安装成功 注：若出现hexo找不到命令 1bash: hexo command not found 是环境变量的node定位错误，改一下，在githush打开的盘找到hexo环境文件，添加到环境变量 替换新生成的hexo文件内容1hexo init hexo #&#x27;hexo&#x27;随便取是自己放博客文件夹名字 生成hexo文件夹，将原hexo文件夹内容全选复制，切记是复制别直接拖过去，防止出问题源文件也丢失了！ 在新生成hexo内粘贴替换，完工 本地生成一下 12hexo g hexo server 三连部署 123hexo cleanhexo generatehexo deploy","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fishups.github.io/categories/hexo/"}],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://fishups.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"矩阵可逆的几个充要条件","slug":"矩阵可逆的几个充要条件","date":"2021-07-27T08:17:20.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/8c1129b8.html","link":"","permalink":"https://fishups.github.io/posts/8c1129b8.html","excerpt":"关于矩阵可逆的几个判断和充要条件","text":"关于矩阵可逆的几个判断和充要条件 矩阵可逆的定义 矩阵可逆:概念：对于n阶矩阵A，如果有一个n阶矩阵B，使AB=BA=E则说矩阵A是可逆的，并把矩阵B称为A的逆矩阵。 A矩阵行列式不等于0$$\\left | A\\right |\\neq 0$$ 需要回忆一下伴随矩阵的概念，行列式的运算规律。 充分性：先证。 再证充分性， 必要性： A可表示为有限个初等矩阵相乘 需要回忆一下初等矩阵的概念，矩阵的初等变换。 充分性： 必要性： A（行)等价于n阶单位矩阵 R(A)=n 需要回忆一下矩阵的秩的概念。 A的列（行)向量组线性无关 需要回忆一下齐次线性方程组，矩阵的列向量组等。 以列向量组为例说明： 齐次线性方程组 Ax=0 仅有零解 第5条中已说明。 非齐次线性方程组 Ax=B 有唯一解 没啥好证的。 任一 n 维向量可由A的列（行)向量组线性表示 需要回忆一下向量空间的内容。 以列向量组为例说明： A的特征值都不为0 记忆一下特征值的乘积为矩阵行列式（这个不证）。","categories":[{"name":"考研","slug":"考研","permalink":"https://fishups.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"线性代数","slug":"线性代数","permalink":"https://fishups.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"我喜欢的原来不是你，而是遇到你的那个时间","slug":"love","date":"2021-04-13T15:48:34.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/81bb41d3.html","link":"","permalink":"https://fishups.github.io/posts/81bb41d3.html","excerpt":"初中的同桌，是初一还是初二来着，真的很早了,当时还坐在右边中间靠窗位置，也许正是这样，我才只会记得美好的部分吧。","text":"初中的同桌，是初一还是初二来着，真的很早了,当时还坐在右边中间靠窗位置，也许正是这样，我才只会记得美好的部分吧。 今天突发奇想，初中认识一个和我一个姓的同桌，女生，非常乐观，每天开开心心，作为同桌的我当时居然没啥感觉，后来她不知道为什么转校了，后面也就再也没她的消息了。 突发奇想想找到她，但是只知道她名字，而且还只是名字的读音，第二个字都忘记具体是哪个字了，网上搜了一下，发现不少人和我一样有这样的想法。看到一条评论。内心中的美好所剩无几，何必再毁掉一个？是啊，我喜欢的是初中的时候，坐在窗户边上，窗外微风，她笑着走来，我没有什么烦恼，每天小小的脑子想着不着边际的事情，她坐在我旁边，就那么安静的坐着。 是这种场景，我喜欢的是这个时间段啊，何必费尽心思找到她，大家都是陌路人了，没必要打扰对方了，回忆只有还是回忆时才是最好的。 要是真找到，她一句你是谁，我不认识你，你是变态吗，哈哈哈哈那便是连这美好的回忆也没了。 有些过去了的事，就留些美好的念想吧，这便是长大的代价吧，哈哈哈。","categories":[{"name":"心事","slug":"心事","permalink":"https://fishups.github.io/categories/%E5%BF%83%E4%BA%8B/"}],"tags":[{"name":"过去时","slug":"过去时","permalink":"https://fishups.github.io/tags/%E8%BF%87%E5%8E%BB%E6%97%B6/"}]},{"title":"写博客的意义探讨","slug":"写博客的意义探讨","date":"2021-04-02T11:13:11.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/532d18b3.html","link":"","permalink":"https://fishups.github.io/posts/532d18b3.html","excerpt":"算起来已经连续捣鼓个人博客1个月整了，因为不懂得太多而且想改的地方也太多，导致这一个月都作息不规律，现在回想起来，我做这个博客的意义是什么的，他能支撑我继续捣鼓完善这个博客吗","text":"算起来已经连续捣鼓个人博客1个月整了，因为不懂得太多而且想改的地方也太多，导致这一个月都作息不规律，现在回想起来，我做这个博客的意义是什么的，他能支撑我继续捣鼓完善这个博客吗 事情的起源是我搜索问题，点到别人的博客中，感觉哎呦，蛮炫的呦，我要是做一个这个是不是逼格满满呢。就是这么一个简单的想法，让我开始捣鼓博客。 我的博客到底要展示什么呢，精美的外观，还是有养分干货满满的文章，还是当作一个写日记的个人网站呢，说实话我现在都没想好，精美的外观肯定会影响文章的突出性，如果如同next主题一样的主文字，那我又感觉有些单调，以后可能得找一个文字为主，格式有特色有逻辑的主题，或者自己学习html+css动画等制作自己的，动态效果多的主题，动态效果多意味着文章分类，简介都得简洁有条理，这不仅是对网页制作的挑战，更是对文学功底的挑战。 目前还没那么多干货可写，博客主要可以写日记发牢骚，毕竟这是二级域名，百度收录不到，没人知道，但是他的确在网上能搜到，哈哈哈哈，这种将自己真情实感写在网上着实有点刺激，但是要注意文章归类，分类就记在随记里面，标签细分，让以后回来看看自己当初写的啥能尽可能回想起完整的情感，让自己的过往留下印记。","categories":[{"name":"胡思乱想","slug":"胡思乱想","permalink":"https://fishups.github.io/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"}],"tags":[{"name":"胡思乱想","slug":"胡思乱想","permalink":"https://fishups.github.io/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"}]},{"title":"volantis主题博客优化及小问题记录","slug":"博客优化升级","date":"2021-03-26T08:17:45.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/4bf3ff71.html","link":"","permalink":"https://fishups.github.io/posts/4bf3ff71.html","excerpt":"持续更新博客的相关优化升级，本博客已更换主题，此文章专门针对volantis主题","text":"持续更新博客的相关优化升级，本博客已更换主题，此文章专门针对volantis主题 本地搜索相关问题F12显示content.json文件405错误查阅显示为文件跨域， 解决办法：博客强制使用https协议，全站统一成https即可 侧边栏目录缩略让侧边栏目录只显示一行，多余的用省略号显示 html theme\\source\\css\\_layout\\toc.styl12345678a padding-left: 8px color: var(--color-meta) font-size: $fontsize-meta display: inline-block overflow: hidden //这三行为添加代码 white-space: nowrap text-overflow: ellipsis //目录只显示一行，剩下的省略号 显示效果如本博客所示，让目录更加简洁清爽! 添加打字机效果简介显示效果如本博客首页所示 theme\\layout\\_cover\\dock.ejs123456789101112131415&lt;div style=&#x27;text-align:center;font-weight:700&#x27;&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/typed.js&quot;&gt;&lt;/script&gt; &lt;strong id=&quot;typedjs1&quot;&gt;&lt;/strong&gt; &lt;script&gt; var typed = new Typed(&quot;#typedjs1&quot;, &#123; strings: [&quot;I&#x27;m nobody !&quot;,&quot;And you ?&quot;], startDelay: 0, //开始延迟 typeSpeed: 120, //打印速度 backSpeed: 80, //回退速度 loop: true, //开启循环 showCursor: true, //显示光标 shuffle: false &#125;); &lt;/script&gt; &lt;/div&gt; 添加位置 12345&lt;% if (theme.cover.subtitle) &#123; %&gt; &lt;p class=&quot;subtitle&quot;&gt;&lt;%- theme.cover.subtitle%&gt;&lt;/p&gt; &lt;% &#125; %&gt; +++在此处加入 &lt;/div&gt; 添加天气功能显示效果如本博客顶部导航栏所示，还不错 本博客使用为心知天气配置，先去官网注册https://www.seniverse.com/ 产品——天气插件——免费试用，免费版本就够了，然后按照需求选择展示的功能，这个页面自带的预览也会在你更改选项后同步更新，方便预览加装到自己网页后是什么效果 设置完成后滑倒最下方，生成代码，复制完整的js代码,打开本地博客文件夹 yourblog\\themes\\volantis\\layout\\_partial\\header.ejs12345678910111213 &lt;% menu_list.forEach(function(value)&#123; %&gt; &lt;% menu(value, &#x27;pc&#x27;) %&gt; &lt;% &#125;) %&gt; &lt;/ul&gt; &lt;/div&gt;+++在这添加，并对齐 &lt;div class=&quot;m_search&quot;&gt; &lt;form name=&quot;searchform&quot; class=&quot;form u-search-form&quot;&gt; &lt;i class=&quot;icon fas fa-search fa-fw&quot;&gt;&lt;/i&gt; &lt;input type=&quot;text&quot; class=&quot;input u-search-input&quot; placeholder=&quot;&lt;%- theme.navbar &amp;&amp; theme.navbar.search %&gt;&quot; /&gt; &lt;/form&gt; &lt;/div&gt; 保存，即可hexo s本地查看效果了 个人博客中加入天气能让第一次来看博客的人感觉很nice，其他效果好像没有，毕竟没人会专门为了天气来博客这看吧，哈哈哈 更改整体卡片的透明度/node_modules/hexo-theme-volantis/source/css/_defines/effect.styl1234.blur @supports (backdrop-filter: blur(20px)) background: alpha($color-card, .9) !important backdrop-filter: saturate(200%) blur(20px) 更改alpha一项中的数值即可，透明度高时最好背景色系统一，不然很晃眼看不起。 设置导航栏透明毛玻璃效果volantis\\source\\css\\_first\\navbar.styl12345.l_headerheight: $navbar-height+ background: rgba(255, 255, 255, 0.15) !important+ backdrop-filter: saturate(200%) blur(20px)box-shadow: $boxshadow-card 原理即找到blur属性，单独拿出来给导航栏，避免整个全局都改变。 文章字体改善首行缩进，字间距 hexo-theme-volantis\\source\\css\\_layout\\md.styl1234&gt;p padding-top: 4px text-indent: 2.3em //缩进 多大自己慢慢调 letter-spacing: 2px //间距 添加缩进后注意.md格式页面，首行也会被缩进导致center命令失效 valine评论推送QQ推送valine自带邮件推送，但是不方便，改成QQ推送 QQ推送选用酷推服务https://cp.xuthus.cc/，登录 绑定QQ号，选择机器人并添加机器人为好友，校验，QQ机器人会发送hello word即表示成功。 点击上方说明，下拉到“配合valine进行推送”，复制框内代码粘贴到script.ejs底部，将skey替换成你自己的 hexo-theme-volantis\\layout\\_third-party\\comments\\valine\\script.ejs12345678910111213141516171819202122232425262728293031323334353637383940&lt;script&gt; var pushLink =&quot;https://push.xuthus.cc/send/替换你的key&quot;; var siteName = &quot;W4J1e&#x27;s blog&quot;; var valineButton=document.getElementsByClassName(&quot;vsubmit vbtn&quot;)[0]; var title = siteName + &quot;上又有新评论啦~!\\n&quot;; function send_valine() &#123; //获取元素信息 var pagename = document.title; var pageurl = document.URL; var pushtime = new Date(); var vnick = document.getElementsByClassName(&quot;vnick vinput&quot;)[0].value; var vmail = document.getElementsByClassName(&quot;vmail vinput&quot;)[0].value; var vlink = document.getElementsByClassName(&quot;vlink vinput&quot;)[0].value; var veditor = document.getElementsByClassName(&quot;veditor vinput&quot;)[0].value; content = title + &quot;昵称：&quot; + vnick + &quot;\\n邮箱：&quot; + vmail + &quot;\\n网站地址：&quot; + vlink + &quot;\\n文章标题：&quot; + pagename + &quot;\\n评论内容：&quot; + veditor + &quot;\\n文章链接：&quot; + pageurl + &quot;\\n评论时间&quot; + pushtime.toLocaleString() + &quot;\\n&quot;; var httpRequest = new XMLHttpRequest(); //第一步：创建需要的对象 httpRequest.open(&quot;POST&quot;, pushLink, true); //第二步：打开连接 httpRequest.setRequestHeader( &quot;Content-type&quot;, &quot;application/json&quot; ); //设置请求头 注：post方式必须设置请求头（在建立连接后设置请求头） httpRequest.send(content); //发送请求 &#125; document.body.addEventListener(&#x27;click&#x27;, function(e) &#123; if(e.target.className.indexOf(&#x27;vsubmit&#x27;) === -1) &#123; return; &#125; send_valine();&#125;)&lt;/script&gt; hexo 三连，即可在网络端博客任意文章下测试 评论删除进入Leancloudhttps://console.leancloud.app/apps，点击valine项目，数据储存/结构化数据/comment，这一项即为所有评论数据，在这可以删除评论","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fishups.github.io/categories/hexo/"}],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://fishups.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"}]},{"title":"写给自己的话","slug":"写给我自己","date":"2021-03-26T06:21:50.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/9e3c2b62.html","link":"","permalink":"https://fishups.github.io/posts/9e3c2b62.html","excerpt":"夜来睡不着，就想写下我一直想写下来的一些看法，给以后的自己和有缘人看。我想，如果你是聪明人，一定能懂得这篇文章里的含义。","text":"夜来睡不着，就想写下我一直想写下来的一些看法，给以后的自己和有缘人看。我想，如果你是聪明人，一定能懂得这篇文章里的含义。 拥有选择权，是人和人最大的区别人和人的差距，在于是否有选择权。有了选择权，你才可能选择你自己要的生活方式。很早的时候我爸讲过一个段子，说一个打拼了大半辈子的亿万富翁，退休后居住田园，每天养养花，钓钓鱼，晒晒太阳，觉得特惬意。时间久了，他发现经常身边有个当地渔民每天也和他一起钓鱼，他就很奇怪，说：“你这么年轻，怎么不出去奋斗呢，你要是把这片池子改造成鱼塘，放点鱼苗再撒网捕捞，没几年你就可以收获比钓鱼多得多的财富。“ 当地人问：“那然后呢？” ”然后你就可以像我一样每天养养花，晒晒太阳，钓钓鱼，享受生活了。” ”可是我现在不也是这样吗？“渔民疑惑的回答。 这个段子本想讽刺富人打拼大半辈子，还不如一个乡村渔民。但凡是相信这个段子去讽刺富人的人，一定不会理解富人和渔民的天差万别，他们核心的区别，就在于选择权。渔民没有选择权，他今天钓鱼，明天也得钓鱼，他的人生得靠不停的钓鱼来维持。而富人今天想居住田园，他想住多久就住多久，住腻了，一个飞机就可以飞去巴黎吃个法式大餐，再去伦敦喝个英式下午茶，旅游累了再回归田园，好好晒晒太阳休息一番。 什么能增加你的选择权，无非是钱，权，能力，和资源。我有钱了，我今天想家，立马就能订个明天的机票回国，和家人团聚吃点家里人做的饭。我没有钱，我得提前好几个月买凌晨出发的廉价航班，或者发现春节机票实在太贵，只好打消过年回家的念头，我没有钱，我就没有选择。高考分数高的学生，就能选择他想去的学校，分数太低，只有蓝翔向你招手。本科就积累多个实习经验的学生，以此为资源，没毕业就拿到了多个offer，只用选择想去的公司就行。混过四年毕业一个offer也没拿到的学生，只要有一家公司发了offer他就会感恩戴德，像抓住救命稻草的一样拽住死死不放，把自己原先的选择和坚持置之脑后。 绝大多数抱怨自己曾做出错误决策的人，即使时光倒流让他再来一遍，也一定做不出正确的选择，因为他压根就没有选择。我身边有些人，抱怨父母不送高考失利的自己出国留学，耽误了自己，但这些人很可能连出国留学需要什么材料都不知道，他只会看到我出国留学在英国工作，就觉得留学是一条好路。他不会知道国外学校会看他国内高考分数，会让他参加美国或英国高考，他也不会知道以他的能力可能雅思两三年都考取不了，就算成功去留学了，可能得靠四年代写才能混一个国内甚至都不承认的野鸡大学学历，甚至我有留学的朋友读了好几年书跟我说还在用谷歌翻译写作，这些他都看不到，他不会知道他从一开始就没有选择。 没有筹码，就没有选择权。而这些能增加你筹码构成选择权的东西，不是白白得来的，也不是靠单纯的努力就能获得的，要想拿到属于你的筹码，你需要思考的力量。 聪明的人低看自己，笨的人高看自己思考的第一步，是知道自己哪儿不足。我和朋友亲戚相处，有觉得我虚伪装的，因为我往往在他们称赞时表现得比较谦虚。这种认知的核心原因，在于对自己和他人实力的误判，这种误判使得能力差的人意识不到自己的不足，而能力强的人看得更远，更意识到自己的不足，反而容易低估自己而表现得谦虚，而这种谦虚在能力差的人眼里，就变成了一种虚伪。 曾经有次亲戚来家里，要我弹钢琴助兴，我就随手弹了一个，我自己觉得弹得挺糟糕，但他们都说好，甚至还有懂音乐的也说好，我当然知道自己差得远了就连忙摆摆手说我还不行。这时候有个亲戚有点气了，说别人都说你好你就好就行了，非这样装干什么。这个时候我才意识到，自己和他人，如果对一个事物的能力不同，那么我们的看法是天差万别的。正因为他不懂音乐，他就不会知道我在弹奏中出的问题，只要没弹中断，那就是好的。相反，正因为我懂，我才知道我哪儿弹快了，哪儿弹重了，哪个音弹错了，哪个地方踏板节奏踩的不对了。 有些人环游世界，觉得这样就增长了见识，但对于没有足够学识的大多数人来说，不过是满世界的厕所打卡。我曾有一次去英国斯旺西旅游，这里有天才诗人Dylan Thomas的纪念馆，斯旺西也因为他而被称为“诗歌海”，然而我并不认识这个诗人，也没读过他的诗，馆藏再漂亮再精致，对我来说不过是几个字母的组合，诗歌手稿里60%的单词我都不认识，参观后在我回忆里留下的只有深深的无知感。那些读过Dylan Thomas诗的人，在这个纪念馆里能感受到多大的震撼，多大的感动，我都无从得知。同样的事物，在不同人眼里是千差万别。认识到自己的无知，是思考的第一步。 会思考的人，行为上才可以偷懒和有些人交谈，会发现大多数不曾见识优秀的人，会有一个误区，觉得优秀的人一定付出了巨大的努力。我高中时候发现，很多成绩中下等的学生，往往很努力，并且会把自己成绩提不高怪罪于自己还不够努力。 真正见识过优秀的人才会知道，真正能力强的人往往玩的最狠，高中身边那边每周末去网吧打游戏的都一个个去了南大上交，在家每天奋笔疾书到深夜的却去了江大。这两者本质的区别，就在于是否在思想上勤奋。如果思想勤奋，那么行为上就能偷懒，若是思想懒惰，行为上就得百倍努力。 以这两种人举例，成绩差的人每天学习到凌晨两三点，早上7点起来上学没精打采，上课一半都在打瞌睡，听的新知识也一知半解，于是别人花半小时就能写完的作业，他得花2个小时，一门2小时，5门就10个小时，于是他又写到凌晨3点，开始了新的循环。而在这写作业的过程中，因为他一知半解，所以伴随着翻书，问同学等一系列操作，每次遇到问题他就可以翻书问同学解决。所以等考试的时候，没有书翻，没有人问，一切得靠自己的时候，他就完了。 优秀的人往往11点就睡觉了，第二天精力充沛，上课的时候他是最专注的，尤其是吸收新知识的时候，讲一个公式，他就会去想这个公式怎么来的，可以怎么用，和之前学的可以怎么连上，讲一个单词，他就会聚精会神的记讲解的动作，行为，声音，笑话，以后遇到这个词，所有的环境因素都可以作为提取记忆的线索。因为上课听懂了，课后半小时就能写完一门作业，晚上回家打盘游戏看看电视，早早11点就睡觉了。并且在写作业的过程中，遇到问题他不会马上翻书问同学，他一定会去想自己为什么不会做，是知识点没记牢，那就多看几遍知识点，是公式的应用很巧妙，那他就好好记住这种解题方式，于是他考试的时候，也能靠自己解决大部分问题。 思考上越勤奋，行为上就能越偷懒，否则就得花更多的时间，更多的精力，做重复劳动。只有去思考才可以增加你的筹码，思考是让你拥有选择权的必要非充分条件。 有选择权后，你还需要有选择的能力对拥有选择权的人来说，做决策一定是个麻烦事。清华还是北大，我想这个选择还不太难做。但如果你手头有10个offer的时候，去哪儿可能就成了你考虑最多的问题。因为无论去哪儿，都有无数的机会成本在流失。有趣的是，当人没有选择的时候，往往不需要承受丧失机会成本的压力，而选择多了，反而压力大了。 就像做设计遵守设计规范，做选择也需要遵循一些原则，这些原则当然是因人而异，而根据我的经验，首先的一条原则就是，做出能增加不可替代性的选择。 可替代性的单向依赖，是一切灾难的源头许多人抱怨父母的约束，说自己人格独立，不该被管。但这种烦恼的根源其实在于他没有经济独立，经济不能独立，人格也很难独立。这种经济的依赖导致父母成了最大的控制者，单向依赖就是烦恼的根源。父母买房后和父母一起住忍受不了管束，抱怨公司抱怨同事为了房租而不敢辞职，骗钱借钱不惜丧命也要去吸食毒品，丈夫事业腾飞后包二奶而妻子却因经济原因无法离婚，这些都源于依赖。 增加不可替代性，就能增加对方对你的依赖，因此最容易产生价值。假如我是一个餐馆的洗碗工，我洗的再好，再快，一旦餐馆经营不善，没有那么多的人来吃饭，没有那么多的碗洗，我就被淘汰了，又或者我和老板娘有点矛盾，她转眼就能把我辞了，隔天就再招来一个新的洗碗工，这种情况下，我的可替代性很强，如果要选择，我一定不当洗碗工。那当餐馆的财务怎样，假如我是餐馆的财务，我知道怎么处理餐馆所有的收支，税务，流水，这种情况下我和老板娘就算有点矛盾，她可能也因为我一定程度的不可或缺而不去炒我，因为招聘一个新的财务，肯定得花不少的时间成本来熟悉业务，甚至新财务可能不知怎么合理避税，则会让餐馆损失更多。但这也不是绝对的，万一老板娘真打心底里瞧不起我，非要炒了我而给她远房亲戚的二舅的侄女一个当财务的机会，也不是不可能，那我还是可被替代。但如果我是餐馆的食材供应商呢，假如这个餐馆一直以食材新鲜优质而广受好评，而我是餐馆主要的食材供应商，一旦我不同意供应了，餐馆可不会像炒一个洗碗工一样，那么容易就马上找一个新的优质渠道，于是老板娘只会拍拍我笑着说：”大哥你开啥玩笑呢，是我们哪儿没做好吗，都可以商量可以谈的，觉得哪儿不好我们改，别动不动就说不供应了，大哥你说是吧。“ 看清楚这个行业，这个领域中最不可替代的地方，努力的去占据这个位置，就能减少依赖，增加适应。如果一个选择能帮助接近行业最不可替代的核心节点，那么就做这个选择，让自己变成这个核心节点。如果你的能力是创造价值，那么就去私企行业创造出价值，变成不可替代的价值源泉。如果你的能力是八面玲珑情商高的多面手，那么就去产能过剩的国企行业，因为越清闲的地方越不需要创造价值，就越会产生办公室政治，而你的多面手能力就是最不可替代的。人是社会的动物，完全不依赖是不可能的，我们每个人都一定程度的依赖于他人，依赖于社会，但即使是这样，我们也要尽量做到双向依赖，这样两方势力才会不断纠缠，从而谁也没法给谁施压，局势才会更加稳定。俄罗斯和美国在经济上纠缠较少，美国说制裁就能制裁，而中国和美国经济相互纠缠，硬生生扯开只会让两方都受伤，于是即使是灯塔国也得三思而后行，不敢随便的轻举妄动。减少单向依赖能增加稳定性，增加不可替代性能增加适应性。 可以说，在做留英还是回国的选择时，不可替代性也是指导我做决策的原则之一。如果我在英国工作太久，我将会很大程度依赖于英国的公司，一旦公司裁掉我，我必须要在1个月内找到新工作，否则我的签证就会失效，这相当于是不可能的任务，这种极大的依赖可不是什么好事。其次，英语能力和文化因素也让我很难在英国职场升职加薪，也就是说以我的能力很难在英国职场上变成那个不可替代的节点，那么相比之下，还不如回国寻找国内领域的不可替代节点。 顺应时代，让可复用的经验变成跳板老一辈的人由于时代的局限性，往往认为国企，公务员是最稳定的工作，千方百计找关系也要让子女去一个月薪两三千的事业单位，我身边这样的不要太多。然而，这种稳定性其实不一定高，因为某些事业单位让每个员工过多的依赖于单位，而某些岗位又涉及长期的重复劳动，而一旦有一点变动，这个人被放到市场上就失去了所有的竞争力，因为这份重复劳动的经验无法在市场上被复用。 我身边有些长辈找关系让子女去了煤炭发电厂，认为这样很稳定，但传统的电厂却已是夕阳产业，日薄西山，也许10年，20年还可以投入使用，但30年，40年呢，这样的夕阳产业必然很大程度的受到新能源发电的冲击，一旦发生产业转型，架构调整，不幸被裁员，这份电厂扳手使用的工作经验无法在市场上被复用，于是只能被时代淘汰，过多的依赖于夕阳产业的单位，是一枚极其不稳定的定时炸弹。相比之下，一些在市场上选择了适应性更强的工作的人，即使被裁员，这些经验也可以变成跳板，让他跳去更高更广的舞台。只有理解了政治经济的大环境，和时代前进的方向，才能在未来很长的时间维度上去做决策，这就是为什么有些女生在择偶时只看到眼下的房和车，而有些女生却知道真正长时间相处的话，三观、性格、上进、共同努力有多么的重要。 这和我在英国工作的问题也很类似，英国的公司文化，工作方式和国内都有很大的不同，我回国后这些英国工作的经验很多无法复用，那么国内公司很可能不倾向录用我，我都能想象国内的面试官会怎么问我，我们这都用敏捷开发的工作流程，你在英国是这样吗，我说不我们不用，面试官又问，那我们这都是产品来完成PRD交代迭代细节，你们那是吗，我们说不我们都不写PRD直接上原型的。那这种情况国内面试官会倾向于录用一个工作方式完全不同的英国工作的人，还是一个适应国内工作流程的人呢？ 不可替代性和依赖性的原则，更多适用于为别人工作的选择，而对于自己当老板的人来说，可能你还需要懂一点经济学。 利用好边际效应递减的原理无论是自己当老板，还是追求财务自由，财富自由，核心的关键点在于找到边际效应递减的节点。用我表哥来举例，他是一个教街舞的机构的老板，在这种情况下，他假如自己来教，如果每天教6个小时，头一个小时和最后一个小时是完全不一样的，这种情况是边际效应递增的，因为当教最后一个小时的时候，人已经非常疲惫了，这个时候需要克服疲惫打起精神再完全最后一个小时的教学，这可比头一个小时累多了，这样的商业模式就是成本递增的。 但如果他招其他人来帮他教呢，情况就不一样了，这个时候多教一个人，多教一个小时，对于老板都没有太多的成本增加。而如果此时招人的工资和教学的收入能平衡的话，这就是边际效应递减的关键节点了，因为此刻只要多教一个学生，付给街舞老师的工资不会因为这个学生而有太多增加，电费和场地费也不会因为多了一个学生而有太多增加，那么这种情况下学生越多，就能用越少的成本换取越多的利润。那么如果达到了这样的节点，关键就在于招生的渠道，那么如何获取优质渠道，找到稳定渠道，就是后话了。 只有找到自己的边际效应递减的节点，才可以减少自己的重复劳动，更进一步实现财务和财富的自由。 人脉的有效与否在于你自己有没有用很多长辈都很看重人脉的作用，这有时代局限性的因素。在过去的年代，很多人办事，找工作，升职，分房子，都是上面的人一句话的事。这种情况下，人脉和情商就显得尤为重要。但时代的发展让这些越来越不现实，而如果在现在的时代还以这样的眼光看待人脉，往往得不到有效的人脉。 人脉的有效与否其实在于自己的资源是否有利益交换的资本。人脉的本质是利益的交换，如果自己没有价值，那么人脉的桥梁永远是单向，就像单向的依赖一样，无法稳固的维持下去。就好比一个成绩差的学生为了抄作业，去勾搭成绩好的学生，也许成绩好的学生可以借一两次，但借多了，成绩差的又没有什么能提供的，这种关系一定无法长久的维持。假如你15年前和马云吃了餐饭，你也不可能因为这点打个电话就让马云给安排个工作，因为双方在资源配置上已经完全不对等了。双向依赖是人脉的基本，当没有让人依赖的资本的时候，所有的人脉都是无效的，这就是为什么一些校园里叱咤风云的学生会主席，在毕业各分东西的时候，才发现自己其实并没有真正可以调用的人脉资源。 当然也有一些人会反驳我，我有些亲戚朋友就非常看重人脉，认为学习不如人脉重要，我想他可能是看到了一些拥有人脉的人更容易找到工作或升职加薪，但即使是这样，人脉的基础仍然是资源的交换，某些投行在招聘的时候更愿意招有关系的人，你觉得别人看到的是关系，其实别人看到的是对方父母背后的资源，更有效的信息渠道，更庞大的资源网络，这就是用来交换的资本。与其想着拥有人脉，不如先让自己拥有资源。 理解时代的局限性很多人抱怨父母和老一辈的人和自己的观念不同，其实长辈的观念不是错的，只是不适应这个时代了，曾适用于他们时代的法则在这个时代不生效了，这种时代局限性是可以理解的。就好像我的亲戚都劝我留在英国，他们认为在英国工作了再回国一定吃香，其实这没有错，不过是在30年前没错，在如今这个时代的我的行业里已经不是这样的了。我拿到国内offer和HR谈薪资的时候，想用国外的offer作筹码增加点薪水，说我在英国可以拿2倍多的钱了，能不能再加一点，结果HR说我们这很多国外工作回来的，都是降薪了的，国内和国外肯定不能比，没有可比性，不能这样比。HR就这样一句话就把我的提议否决了，亲戚有时代局限性是可以理解的，但我如果自己也被过去的时代局限，以为只要在英国工作了，回国就吃香了，那么最后自讨苦吃的只会是我自己。 爱因斯坦在他的时代不相信量子力学，说上帝不掷骰子，结果大错特错。牛顿潜心研究神学判断人类历史只有200年，这些都是时代局限性导致的，我们可以保持一份理解，只不过我们自己不能被时代局限，尤其是被过去的时代所局限。在现在这个时代，如果长辈还费尽心思找关系想让你去某个夕阳产业的国企从基层做起，那么你自己应该有自己的认知，要知道怎样才能增加自己的不可替代性，怎样增加适应性，什么才是真的稳定。 这个时代，拥抱变化的适应性才是最大的稳定。有不少的朋友和我说，他不想奋斗，就想找一份不需要学习可以一直做下去的工作，就轻松的过日子。这样的生活方式当然是好的，然而抱着这样想法的人，往往不能过这样轻松的日子。去煤炭电厂的人也是这么想的，每天用扳手看着仪表，不用怎么学习就可以一直做下去，而这样的夕阳产业日薄西山被新能源替代的时候，这样的日子就可以随时到头，而只有真正具备适应性的人，才能真的过轻松的日子，你的思维方式决定了你会过怎样的生活。 平静的看待各种主义我们这个时代有很多主义，消费主义，大男子主义，女权主义，民族主义，要我说，我认为要平静的去看待这些主义，而不要陷入其中，一旦陷入其中，这份主义很可能遮蔽你的视野，把你的格局完全困在其中，无法逃脱。就拿民族主义来说，陷入民族主义情绪，就无法真正理性的去看待问题，相反会变得情绪化，产生戾气。比如有朋友，在我一谈到国家存在的问题时，就会反驳说：“别人国家难道就没有吗，为什么你就只注意到不好的地方，别人就都是好的吗？”这样的论调一提出，就没法真正去探讨原本存在的问题了。以种族主义举例， 我曾在知乎微博看过太多种族歧视的案例，有说在英国看到小孩和青少年辱华的，有说旅游学习都看不到，一到工作的时候就遇到了明显区别对待，有说中国人在国外是二等公民的，类似的论调和举例数不胜数，看到这些我同样会义愤填膺，充满戾气。不过我马上就平静了下来，因为我问了自己一句，“我遇到过吗？”答案是几乎没有，我在英国两年几乎没有遇到过类似的歧视，仅仅的一次还来源于一个没给钱所以愤愤不平的流浪汉，即使我在这边工作了，所有的同事也是相当的友好和礼貌，所以我发现，一旦我陷了进去，我的情绪就被控制了，我的格局就被缩小了，于是我反而看不到我真实的生活了。 又好比女权主义，过多陷入女权主义，会倾向于将一切问题归结于男权社会，而忽略了男女不平等只是更大的阶级矛盾中的一部分。比如我有朋友就认为婚姻是对女性的剥削，因为婚姻的最初基础是女性成为某个男性的所有物，但这样的论调不仅让人产生戾气，还让人忽视现实问题。也许最初的婚姻确是如此，但如今早已不可同日而语，婚姻的基础在于互相所有，互相放弃一部分自由而选择在一起，如果如今的婚姻的基础仍是女性成为某个男性的所有物的话，男性的出轨和包养也会被接受，因为妻子仅仅是其中的所有物，但我们都知道，婚姻的基础并不在此。男性和女性相处，除了相互所有，还要共同成长。只有两个人都保持相同的成长速度，共同进步，才能棋逢对手，长久的相处。一旦成长速度差不一样，一方很容易看得更多更远，走入了新的世界，而另一个人没能跟上，观念和价值产生冲突，导致最终关系破裂。 对于消费主义，如果绝对理性的看待，会发现消费主义让人相信我消费我生活就更好的理念，生活不顺利了消费让自己开心，升职加薪去消费犒劳自己让自己开心，消费成了生活享乐的宗旨和方式，是这个时代新的宗教，大家以为把带格纹（Burberry）的衣服穿身上就是自信就是好的，把两个G（GUCCI）露在外面就是成功的优秀的，但这些本质上不过是符号和棉质面料而已，但我们却相信穿上印了这个符号的棉质面料我就能变得更好更成功的，这无非是一种新宗教。消费主义还有由奢入俭难的依赖性，穿了Burberry，就再也不穿Jack Wills，穿了联名鞋，就再也不买普通鞋，用了Prada包就再也背不回原来的双肩包，消费一旦发生变成习惯，就会一定程度成瘾，除非有外界环境干扰，这种消费等级不会下降。一开始只打算买一件Burberry衬衣，但潜移默化的降不下去，反而新增了新的需求，因为需要和衬衣搭配的衣服鞋，于是就又买了Burberry风衣帽子鞋甚至伞，这种消费主义的渗透，让陷入其中的人看不清自己真正想要的生活。 你一定以为我要讽刺消费主义了，其实正好相反。绝对理性的分析会是批判，但人是不会永远理性的，我们总会有感性的一面。如果我们存了几个月的钱，去买一件我们想要很久的衣服，想要很久的包，那一刻我们是幸福的，是喜悦的，穿出去也是自信的，甚至这是我们老了也会记得的事情，会和我们的后代说，我年轻的时候可追潮流了，存了好几个月的钱就为了买那件衣服，买了还天天穿，别提多高兴了。我们的人生不就是由这么一个个情绪体验构成的吗，所以，一边克制，一边及时行乐吧。 每一片雪花都是无辜的成长最大的标志是平静，平静的去接受变化，接受自己，也接受他人。有时候我们需要接受自己的平凡平庸，有时候我们需要理解长辈因时代局限性而产生的传统观念，有时候我们需要接受他人因个人痛苦的经历而产生的戾气与愤怒，有时候我们需要接受作为个人在这个庞大的社会机器前的无力与无助。有一句话说“雪崩时，没有一片雪花是无辜的”，我很讨厌这句话。雪崩的时候，每一片雪花都被另一片雪花推着前进，每一片雪花都没有能力自己来选择自己前进的方向，只能被社会，时代逼着前进，作为个人雪花的我们，很多时候是无力的，相比指责每一片雪花，我认为平静的接受这种无力，是一种真正的智慧，因为这种平静会给你力量，会让你不被无力所绑住，不被各种主义所限制。每个人都被其成长环境，文化，国家，时代所局限，我们都是这一片片雪花，左右不了前进的方向，但如果平静的去看待，也许你会发现一个格局更大的自己","categories":[],"tags":[]},{"title":"WIKI目录页","slug":"WIKI","date":"2021-03-24T08:10:30.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/f4ccd23b.html","link":"","permalink":"https://fishups.github.io/posts/f4ccd23b.html","excerpt":"空白待填","text":"空白待填","categories":[{"name":"知识库","slug":"知识库","permalink":"https://fishups.github.io/categories/%E7%9F%A5%E8%AF%86%E5%BA%93/"}],"tags":[{"name":"知识库","slug":"知识库","permalink":"https://fishups.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"}]},{"title":"使用volantis主题安装hexo博客","slug":"安装博客","date":"2021-03-16T14:56:51.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/2c41f232.html","link":"","permalink":"https://fishups.github.io/posts/2c41f232.html","excerpt":"终于下定决心搞一个个人博客了！","text":"终于下定决心搞一个个人博客了！ 前期准备1、安装 Node.js 环境： 因为 Hexo 是基于Node.js 的博客框架，就像 Java 要依赖 JDK 环境一样。 node下载地址：http://nodejs.cn/download/ 2、安装版本控制工具 Git ： 用来将本地项目托管到码云，所以还需要自己注册一个码云的账号 下载地址：https://git-scm.com/download 3.检查是否安装成功 1234#在cmd中输入git --versionnode -vnpm -v 显示对应版本号即为成功 hexo安装1234567 #全局安装npm install hexo-cli -g #查看hexo版本 hexo -v 创建本地博客本地文件建立在任意位置新建一个文件夹，作位安装博客本地文件的位置，我这里选择在d盘安装，如 D/hexo 1234#表示安装 hexonpm install hexo-cli -g#查看hexo版本hexo -v hexo初始化在新建的文件夹内右键，git bush here,输入 12npm installnpm install 输入前确保此文件夹内啥都没有，不然安装失败 安装完成后文件夹内有如下文件 1234567891011.├── .deploy # 需要部署的文件├── node_modules # 项目所有的依赖包和插件├── public # 生成的静态网页文件├── scaffolds # 文章模板├── source # 博客正文和其他源文件等都应该放在这里| ├── _drafts # 草稿| └── _posts # 文章├── themes # 主题├── _config.yml # 全局配置文件└── package.json # 项目依赖信息 本地查看效果执行以下命令，执行完即可登录 http://localhost:4000/ 查看效果 12$ hexo generate$ hexo server 显示以下信息说明操作成功： 1INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 默认显示的第一篇文章就是教怎么新建文章的 将博客部署到云端配置 SSH 密钥只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github&amp;gitee 代码库同步 在你的博客文件夹右键git bush here 1$ ssh-keygen -t rsa -C 之后会出现： 123Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储 然后会出现： 123Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again: 接下来屏幕会显示： 12Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub. &emsp;&emsp;到这个出现的文件夹内找到rsa.pub，用记事本打开，复制，到gitee或者GitHub的个人设置里面，找到 SSH and GPG Keys，添加刚复制的密钥即可 测试是否添加成功 1$ ssh -T git@github.com 之后会显示： 输入 yes 后会显示 此时你还需要配置： 123$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称 $ git config --global user.email &quot;xxx@qq.com&quot;// 填写你的github注册邮箱 将项目部署到码云1、在码云新建一个仓库，注意标红的地方 2、在项目根目录下安装git部署插件 123# 之后就可以使用 hexo deploy（或简写 hexo d）将项目部署到gitee远程仓库 npm install hexo-deployer-git --save 3、修改项目配置文件在根目录：**_config.yml**，在最下面，修改如下内容 4、使用命令 hexo d 将项目部署到 gitee 远程仓库，此时本地文件夹中出现有一个public文件夹。 5、开启 Gitee Pages 静态网页托管服务 之后使用提供的网址即可访问博客，每次重新上传代码到gitee时，都需要点击下图的更新按钮重启page服务 部署到GitHub1.创建项目代码库：点击 New repository 开始创建，步骤及注意事项见图： 2.打开自己的项目 yourname.github.io，鼠标移到 Clone or download 按钮，选择 Use SSH，复制地址 3.在 _config.yml文件中gitee地址下面再添加一个 1234567deploy: type: git repo: github: xxxxx gitee: xxxxx branch: master 三连部署1hexo cl &amp;&amp; hexo g -d 访问自己的网站博客吧！","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fishups.github.io/categories/hexo/"}],"tags":[]},{"title":"markdown","slug":"markdown","date":"2021-03-15T13:50:12.000Z","updated":"2021-12-18T14:07:44.758Z","comments":true,"path":"posts/96be88e3.html","link":"","permalink":"https://fishups.github.io/posts/96be88e3.html","excerpt":"本主题从2级标题开始，这样目录才能正常工作，不知道为什么","text":"本主题从2级标题开始，这样目录才能正常工作，不知道为什么 只显示前面部分方法 加《!--more--》将中文括号改成英文 或者在文章的`front-matter`中添加`description`，其中description中的内容就会被显示在首页上，其余一律不显示 12345---title: 让首页显示部分内容date: 2021-03-15 22:55:10description: 这是显示在首页的概述，正文内容均会被隐藏。--- markdown标题2种格式 使用=和-标记一级和二级=和-标记语法如下 12345我展示的是一级标题=================我展示的是二级标题----------------- 显示效果如下 使用# 号标记使用#号可表示 1-6 级标题，一级标题对应一个#号，二级标题对应两个#号，以此类推。(局部代码用`xxxxx`xxxx表示） 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果如下 Markdown 段落格式Markdown段落段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格(tab)加上回车。 字体Markdown 可以使用以下几种字体: 123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 斜体文本 粗体文本 粗斜体文本 1,2,3个的区别罢了。。。 分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789**** * ******- - ----------- 显示的就是一条粗一点的横线，如下 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下： 123RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~ google.combaidu.com 下划线下划线可以通过 HTML 的&lt;u&gt;标签来实现：这是下划线 脚注脚注使您可以添加注释和参考，而不会使文档正文混乱。创建脚注时，带有脚注引用的链接将出现带有链接的上标编号。读者可以单击链接跳至页面底部的脚注内容。要创建脚注参考，请在方括号（1）内添加插入符号和标识符。标识符可以是数字或文字，但他们不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。 1xxxxx[^1] 实际演示 123创建脚注格式类似这样 [1]。[^1]: 这是注释，写在任意地方，结尾或者段落结尾合适 创建脚注格式类似这样1 Markdown 列表Markdown 有序列表和无序列表。无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写 1 2 有序列表使用数字并加上 . 号来表示,不用加空格 1.xxx2.xxx3.xxxx 列表嵌套列表嵌套只需在子列表中的选项前面添加四个空格即可： 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 定义清单不太好用，不知道为什么。。。 123456First Term: This is the definition of the first term.Second Term: This is one definition of the second term.: This is another definition of the second term. html代码，建议用这个，上面那个好像没反应 1234567&lt;dl&gt; &lt;dt&gt;First Term&lt;/dt&gt; &lt;dd&gt;This is the definition of the first term.&lt;/dd&gt; &lt;dt&gt;Second Term&lt;/dt&gt; &lt;dd&gt;This is one definition of the second term. &lt;/dd&gt; &lt;dd&gt;This is another definition of the second term.&lt;/dd&gt;&lt;/dl&gt; First Term This is the definition of the first term. Second Term This is one definition of the second term. This is another definition of the second term. ### 任务清单 任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号（-）和方括号，并[ ]在其前面加上一个空格（）。要选择一个复选框，请x在方括号（[x]）之间添加in 。 123- [x] Write the press release- [ ] Update the website- [ ] Contact the media 框可以点的 Write the press release Update the website Contact the media Markdown 区块​ 上面有列表格式时，怎么退出列表：多按几次回车，直到退出列表 Markdown 区块引用是在段落开头使用**&gt;** 符号 (加粗代码在加粗里面加``)，然后后面紧跟一个空格符号： 12&gt; 这是区块1&gt; 这是区块2 这是区块1 这是区块2 另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： 123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 最外层 diyicen diercen 区块中使用列表区块中使用列表实例如下： 123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项 区块中使用列表 第一项 第二项 第一项 第二项 第三项 列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。 1234* 第一项 &gt; 菜鸟教程 &gt; 学的不仅是技术更是梦想* 第二项 第一项 菜鸟教程学的不仅是技术更是梦想 第二项 Markdown 代码Markdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`） 1`printf()` 函数 printf() 函数 代码区块代码区块使用 4 个空格或者一个制表符（Tab 键） 1234javascript$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;); 你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定)推荐这种 12345​```javascript$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;);​``` 代码高亮与注释markdown自带代码头部注释和高亮 123456789​```c xxx/xxx#include &lt;stdio.h&gt;int main()&#123; /* 我的第一个 C 程序 */ printf(“Hello, World! \\n”); return 0;&#125;​``` xxx/xxx1234567#include &lt;stdio.h&gt;int main()&#123; /* 我的第一个 C 程序 */ printf(“Hello, World! \\n”); return 0;&#125; 方便max！！！注释表明代码添加位置等非常方便 Markdown 链接自动网址链接许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入http://www.example.com，即使您没有使用方括号，您的Markdown处理器也会自动将其转换为链接。 Markdown 链接链接使用方法如下 12345[链接名称](链接地址)或者&lt;链接地址&gt; 1这是一个链接 [我的博客](https://fishups.github.io) 这是一个链接 我的博客 直接使用链接地址： 1&lt;https://fishups.github.io&gt; https://fishups.github.io 高级链接我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 123456这个链接用 1 作为网址变量 [Google][1]这个链接用 我的博客 作为网址变量 [我的博客][handsonq]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [handsonq]: https://fishups.github.io 这个链接用 1 作为网址变量 Google这个链接用 我的博客 作为网址变量 我的博客然后在文档的结尾为变量赋值（网址） 禁用自动URL链接如果您不希望自动链接URL，则可以通过将URL表示为带有刻度线的代码来删除该链接。 1`http://www.example.com` http://www.example.com Markdown 图片Markdown 图片语法格式如下 123![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) 开头一个感叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。 1![img](https://s3.ax1x.com/2021/03/15/6BQvY4.png) 当然，你也可以像网址那样对图片网址使用变量: 1234这个链接用 1 作为网址变量 [头像][1].然后在文档的结尾为变量赋值（网址）[1]: https://s3.ax1x.com/2021/03/15/6BQvY4.png 这个链接用 1 作为网址变量 头像.然后在文档的结尾为变量赋值（网址） Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 标签。 1&lt;img src=&quot;https://s3.ax1x.com/2021/03/15/6BQvY4.png&quot; width=&quot;30%&quot;&gt; 小了一点点。。。 Markdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 表头 表头 单元格 单元格 单元格 单元格 对齐方式 我们可以设置表格的对齐方式 -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 Markdown 高级技巧支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如： 1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 使用 Ctrl+Alt+Del 重启电脑 转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： 12**文本加粗** \\*\\* 正常显示星号 \\*\\* 文本加粗** 正常显示星号 ** Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\\ 反斜线` 反引号* 星号_ 下划线&#123;&#125; 花括号[] 方括号() 小括号# 井字号+ 加号- 减号. 英文句点! 感叹号 公式需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。 12345678$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 = \\begin&#123;vmatrix&#125; \\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;$$ $$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}$$ typora 画流程图、时序图(顺序图)、甘特图不方便，记不住，建议使用office visio 1、横向流程图源码格式： 12345678​```mermaidgraph LRA[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图]​``` graph LR A[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a&#x3D;1| D[结果1] C --&gt;|a&#x3D;2| E[结果2] F[横向流程图] 2、竖向流程图源码格式： 12345678​```mermaidgraph TDA[方形] --&gt; B(圆角) B --&gt; C&#123;条件a&#125; C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图]​``` graph TD A[方形] --&gt; B(圆角) B --&gt; C&#123;条件a&#125; C --&gt; |a&#x3D;1| D[结果1] C --&gt; |a&#x3D;2| E[结果2] F[竖向流程图] 3、标准流程图源码格式： 1234567891011​```flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op​``` 123456789st&#x3D;&gt;start: 开始框op&#x3D;&gt;operation: 处理框cond&#x3D;&gt;condition: 判断框(是或否?)sub1&#x3D;&gt;subroutine: 子流程io&#x3D;&gt;inputoutput: 输入输出框e&#x3D;&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 4、标准流程图源码格式（横向）： 1234567891011​```flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op​``` 123456789st&#x3D;&gt;start: 开始框op&#x3D;&gt;operation: 处理框cond&#x3D;&gt;condition: 判断框(是或否?)sub1&#x3D;&gt;subroutine: 子流程io&#x3D;&gt;inputoutput: 输入输出框e&#x3D;&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op 5、UML时序图源码样例： 1234567​```sequence对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？​``` 12345对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ 6、UML时序图源码复杂样例： 12345678910111213​```sequenceTitle: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩​``` 1234567891011Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 7、UML标准时序图样例： 1234567891011121314​```mermaid%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好!​``` %% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 8、甘特图样例： 123456789101112131415161718192021​```mermaid%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h​``` 这是注释，写在任意地方，结尾或者段落结尾合适 ，结尾自带返回文档 ↩","categories":[{"name":"markdown","slug":"markdown","permalink":"https://fishups.github.io/categories/markdown/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://fishups.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://fishups.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"},{"name":"hexo","slug":"hexo","permalink":"https://fishups.github.io/categories/hexo/"},{"name":"心事","slug":"心事","permalink":"https://fishups.github.io/categories/%E5%BF%83%E4%BA%8B/"},{"name":"考研","slug":"考研","permalink":"https://fishups.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"胡思乱想","slug":"胡思乱想","permalink":"https://fishups.github.io/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"},{"name":"知识库","slug":"知识库","permalink":"https://fishups.github.io/categories/%E7%9F%A5%E8%AF%86%E5%BA%93/"},{"name":"markdown","slug":"markdown","permalink":"https://fishups.github.io/categories/markdown/"}],"tags":[{"name":"博客优化","slug":"博客优化","permalink":"https://fishups.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"},{"name":"诗","slug":"诗","permalink":"https://fishups.github.io/tags/%E8%AF%97/"},{"name":"线性代数","slug":"线性代数","permalink":"https://fishups.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"过去时","slug":"过去时","permalink":"https://fishups.github.io/tags/%E8%BF%87%E5%8E%BB%E6%97%B6/"},{"name":"胡思乱想","slug":"胡思乱想","permalink":"https://fishups.github.io/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"},{"name":"知识库","slug":"知识库","permalink":"https://fishups.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"},{"name":"笔记","slug":"笔记","permalink":"https://fishups.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}